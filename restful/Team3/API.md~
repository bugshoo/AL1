Title

ALBLOG API REST - Especificacion de gesti√≥n de recursos de ALBLOG API

Users
Posts
Comments
Albums
Photos
Todos


**** USERS *****

    URL

    /rest/v1/users

    Methods: C.R.U.D

    <The request type>

    GET  	/rest/v1/users/all 			Devuelve un listado con todos los usuarios registrados
    GET 	/rest/v1/user/:Id			Devuelve los datos del usuario con Id = <Id> 
    GET 	/rest/v1/user/:userId/posts/:Id		Devuelve el post con Id = <Id> del usuario con UserId = <UserId>
    GET 	/rest/v1/user/:userId/album/:Id		Devuelve el album con Id = <Id> del usuario con UserId = <UserId> 
	
    DELETE	/rest/v1/users/:Id			Elimina un usuario
    PUT		/rest/v1/users/all
	

    Required:

    id=[integer]

    Optional:

    photo_id=[alphanumeric]

    Data Params

    <If making a post request, what should the body payload look like? URL Params rules apply here too.>

    Success Response:

    <What should the status code be on success and is there any returned data? This is useful when people need to to know what their callbacks should expect!>
        Code: 200
        Content: { id : 12 }

    Error Response:

    <Most endpoints will have many ways they can fail. From unauthorized access, to wrongful parameters etc. All of those should be liste d here. It might seem repetitive, but it helps prevent assumptions from being made where they should be.>
        Code: 401 UNAUTHORIZED
        Content: { error : "Log in" }

    OR
        Code: 422 UNPROCESSABLE ENTRY
        Content: { error : "Email Invalid" }

    Sample Call:

    <Just a sample call to your endpoint in a runnable format ($.ajax call or a curl request) - this makes life easier and more predictable.>

    Notes:

    <This is where all uncertainties, commentary, discussion etc. can go. I recommend timestamping and identifying oneself 
